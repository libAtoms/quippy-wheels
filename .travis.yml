env:
    global:
        - REPO_DIR=QUIP
        # Commit from your-project that you want to build
        - BUILD_COMMIT=e07c62af247
        # pip dependencies to _build_ your project
        # pip dependencies to _test_ your project.  Include any dependencies
        # that you need, that are also specified in BUILD_DEPENDS, this will be
        # a separate install.
        - TEST_DEPENDS=numpy
        # Now see the Uploads section for the stuff you need to
        # upload your wheels after CI has built them.

# You will likely prefer "language: generic" for travis configuration,
# rather than, say "language: python". Multibuild doesn't use
# Travis-provided Python but rather installs and uses its own, where the
# Python version is set from the MB_PYTHON_VERSION variable. You can still
# specify a language here if you need it for some unrelated logic and you
# can't use Multibuild-provided Python or other software present on a
# builder.
language: generic

# For CPython macOS builds only, the minimum supported macOS version and
# architectures of any C extensions in the wheel are set with the variable
# MB_PYTHON_OSX_VER: 10.9 (64-bit only) or 10.6 (64/32-bit dual arch). By
# default this is set to the highest available for the Python version selected
# using MB_PYTHON_VERSION. You should only need to set this explicitly if you
# are building a 10.6 dual-arch build for a CPython version where both a 10.9 and
# 10.6 build are available (for example, 2.7 or 3.7).
# All PyPy macOS builds are 64-bit only.

# Required in Linux to invoke `docker` ourselves
services: docker

# Host distribution.  This is the distribution from which we run the build
# and test containers, via docker.
dist: xenial

# osx image that enables building Apple silicon libraries
osx_image: xcode12.2

matrix:
  include:
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9
        - PLAT=i686
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.6
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.7
        - MB_PYTHON_OSX_VER=10.6
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.7
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.8
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.9
        - PLAT="universal2"
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.9
        - QUIP_ARCH=darwin_x86_64_gfortran

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    # Maybe get and clean and patch source
    - clean_code $REPO_DIR $BUILD_COMMIT
    - build_wheel $REPO_DIR/build/${QUIP_ARCH} $PLAT

script:
    - install_run $PLAT

after_success:
    # Here you should put the code to upload your wheels
    # See the Uploads section for more details.

