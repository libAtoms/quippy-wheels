env:
    global:
        # pip dependencies to _build_ your project
        - BUILD_DEPENDS="oldest-supported-numpy"
        # pip dependencies to _test_ your project.  Include any dependencies
        # that you need, that are also specified in BUILD_DEPENDS, this will be
        # a separate install.
        - TEST_DEPENDS="numpy"
        # Now see the Uploads section for the stuff you need to
        # upload your wheels after CI has built them.
        - TWINE_USERNAME="__token__"
        - TWINE_NON_INTERACTIVE=1
        - secure: "RqRdkL96EEyA8QG4Ghoxa9UlCJj8SW9gwZxHTX+/fquekIfU5zPd6bjb/+JIylePR8fR5YgcBSowvpw4HUNWUQ4mRx9j+GA9rdaKejH9ppFAB2glHHI6ygZWZpxhbAx9RGMF0gDIrAZ4PTsfLFmC6SyqLBaQqtFN1at9eSivaPFICkDoE+BB6zWk+32J4zM5912EZv64SS3Kb5Ao/aSwLcrxgo/xUwqrp1vKFxOf2zU24dJ1yZ3hcLGKHy6+ncG+bR9cMeUZIq3/Dnechjj/1jiYAKcmVjgy/XFZuy16ESu4Lp24mB6U4/58BsbRIJXL9iF0NfOX98r+5+gWzY74YXrFssRHvEcedEWLJ6/fGfEnv5ulhMdjTnnKiBhvwrXsaobcLWnl++C1YcAJ7GRR9HoHvnojeKQsHUCzaSjSVCG2EnpHsQse8lkJL5Wd5M+/vRQ6pWJfRydS+lfCXib2/YOeiRUy+WI34/qDUpYMp3iQUJYPb/rtjdy/W1Ujk7w6FmatPnA2ElM/g0eQWG1wveFj0hS7Q/J3IxI0zJCdaZiMYpPBmWFXAEm4a+X8fUlIQzCStJWdYt6+NmNBngeCCzaj7uiI7w+/jbIkVV3ltwfFvGkQYPuN7oHBB0IaOb3+GQTx1UhZKLx3K1pzHoUOa/VmcZA9g3kNvmnsVLhzKqc="

# You will likely prefer "language: generic" for travis configuration,
# rather than, say "language: python". Multibuild doesn't use
# Travis-provided Python but rather installs and uses its own, where the
# Python version is set from the MB_PYTHON_VERSION variable. You can still
# specify a language here if you need it for some unrelated logic and you
# can't use Multibuild-provided Python or other software present on a
# builder.
language: generic

# For CPython macOS builds only, the minimum supported macOS version and
# architectures of any C extensions in the wheel are set with the variable
# MB_PYTHON_OSX_VER: 10.9 (64-bit only) or 10.6 (64/32-bit dual arch). By
# default this is set to the highest available for the Python version selected
# using MB_PYTHON_VERSION. You should only need to set this explicitly if you
# are building a 10.6 dual-arch build for a CPython version where both a 10.9 and
# 10.6 build are available (for example, 2.7 or 3.7).
# All PyPy macOS builds are 64-bit only.

# Required in Linux to invoke `docker` ourselves
services: docker

# Host distribution.  This is the distribution from which we run the build
# and test containers, via docker.
dist: xenial

# osx image that enables building Apple silicon libraries
osx_image: xcode12.5

matrix:
  include:

    # - os: osx
    #   language: generic
    #   env:
    #     - MB_PYTHON_VERSION=3.6
    #     - QUIP_ARCH=darwin_x86_64_gfortran_openmp
    # - os: osx
    #   language: generic
    #   env:
    #     - MB_PYTHON_VERSION=3.7
    #     - QUIP_ARCH=darwin_x86_64_gfortran_openmp
    # - os: osx
    #   language: generic
    #   env:
    #     - MB_PYTHON_VERSION=3.8
    #     - QUIP_ARCH=darwin_x86_64_gfortran_openmp
    #     - MB_PYTHON_OSX_VER=10.9
    # - os: osx
    #   language: generic
    #   env:
    #     - MB_PYTHON_VERSION=3.9
    #     - QUIP_ARCH=darwin_x86_64_gfortran_openmp
    #     - MB_PYTHON_OSX_VER=10.9
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.9
        - QUIP_ARCH=darwin_x86_64_gfortran_openmp
        - PLAT="universal2"
    # - os: linux
    #   env:
    #     - MB_ML_VER=2010
    #     - MB_PYTHON_VERSION=3.6
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2010
    #     - MB_PYTHON_VERSION=3.7
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2010
    #     - MB_PYTHON_VERSION=3.8
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2010
    #     - MB_PYTHON_VERSION=3.9
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2014
    #     - MB_PYTHON_VERSION=3.6
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2014
    #     - MB_PYTHON_VERSION=3.7
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2014
    #     - MB_PYTHON_VERSION=3.8
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp
    # - os: linux
    #   env:
    #     - MB_ML_VER=2014
    #     - MB_PYTHON_VERSION=3.9
    #     - QUIP_ARCH=linux_x86_64_gfortran_openmp

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
  - REPO_DIR=QUIP/build/${QUIP_ARCH}
  - |
    if [[ -n "${TRAVIS_TAG}" ]]; then
         echo ${TRAVIS_TAG} > TRAVIS_TAG
    fi
  - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
- |
  echo "after_success for tag ${TRAVIS_TAG}"
  if [[ -n "${TRAVIS_TAG}" ]]; then
    if echo "${TRAVIS_TAG}" | python -c 'import sys, re; r = re.compile(r"^v(\d+\.)?(\d+\.)?(\*|\d+)$"); sys.exit(r.match(sys.stdin.read()) is None)'; then
      echo Deploying ${TRAVIS_TAG} to PyPI
      pip install twine
      twine upload --repository testpypi ${TRAVIS_BUILD_DIR}/${WHEEL_SDIR}/*.whl
    else
      echo Skipping deployment of tag ${TRAVIS_TAG} to PyPi
    fi
  fi

deploy:
- provider: releases
  api_key:
      secure: "PhC50onmh/UlOAkSGahs4O59gyQCfyCrdCJsFvg0LIfATqCWDSDmM1qJOZok9RzCfLbrAACOhIFxCv+IhoKNcMny9n2t2i/kGIZwXYdZv0pFc6HKibOzCaIVO7z7q3onmTMCJhUnrE5FEJMpEG4/NsN7V9eKfFTX+Ep7bN7Ua3ZrQgnTPk0ANq+VQR+jJvCY+YYOrkUUMu59E7GFSGT10HOwieeZSz9Bx5rWCFHEDvnFzcYi+pankKSMN1VIkB5fbpU5MpA9DzWjmRBwnHwRK2rpVfGq61W84530EwwV6LzgN6TQTZKl3knRPjPX0gs8wUCJhl6FG0UgpZLqlC+DtFwQyefgqNAqR7A0T2nd49yF42jTNAsEmn0enYFvTGTayFQJGpk3P5uoxRJzBC4drWDtOMFhOh5sN0ZlhYI11XUCNSWlwb8pdSuKjAgSbxFsoBst+el+Th/+0WKxbo17pKpDljVzZRjLgMF0yOc6ubDc+yjJVj6Teq9GDJTDX/W5LezG5lXSjAoI+L0mabRbbQbqXlo+DzlyqTG1nMHZketZD7ZGeo4TJjvUFnS7JQlJT7d01Sjvt1BADidoQdlmoR5FlnZ/4/3FDeOeRNS7G/Fgl+YK71S8j+qZUwmXmUJr/kx0Nnd8YZ814gOVIqx2UneGetWgBmiRRFWfzmJzudg="
  file_glob: true
  file: "${TRAVIS_BUILD_DIR}/${WHEEL_SDIR}/*.whl"
  skip_cleanup: true
  on:
    repo: libAtoms/quippy-wheels
    tags: true
