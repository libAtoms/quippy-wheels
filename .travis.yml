env:
    global:
        # pip dependencies to _build_ your project
        - BUILD_DEPENDS="oldest-supported-numpy"
        # pip dependencies to _test_ your project.  Include any dependencies
        # that you need, that are also specified in BUILD_DEPENDS, this will be
        # a separate install.
        - TEST_DEPENDS="numpy"
        # Now see the Uploads section for the stuff you need to
        # upload your wheels after CI has built them.
        - TWINE_USERNAME="__token__"
        - TWINE_NON_INTERACTIVE=1
        - secure: "sBZVo7BhALkPmohn9YJ0hQ5byIW6yglq9nevyLIoqPwH1C5Qxy2IJLqXHe3z1ODmBLHqGjnQ0STXgKryNpW73xHPgYEgTk8dDAKooafAvE6E5OeupMNEWSTmbdie8H8B5kaFSr5JIjPmjNDXQNqPuBUjk71iYhpqLYAQ6ESRloiLQ6W5lgnCUDaH++CJ+rJTlfea2fTH5SLQZ2aR9qTuwXcHHGHmIdY2j0lRy9A78X9sq/Z6sZNBwjbqd/5CNCIXv7k4qgwK3GzplK2dXLJGcGfLMdwH52X/8DICWQDoOFZQATNNwFCNLlh1HPkzlm+zOoL6XUgFN9UFmwOFJ9XtzBKy+IzdrT8lVacUfCMAu0ud6OzE0TEyYzBnN0PcN3h4gWvJb9uXkKyGJ7SDR2s9gbVddAUSpbxlasTYe71LUaiWz7ZV4uyOoqPA0Ei+5Pfo4K/hWWD0dhBYNPY1ayXFmU2MqaXjqIqGiA1D9TM5/lkJjeNRQe2CuD0IYlNDDhUb7PnRiBdVn3Y7pnVJw+pLW4ymnPy33bj8At3ZEuhGJWH21d+YxiDsElzEWyOp1HRK4NmRhDpEu/GA4YvF8deY9YCXjCtNpQAPt87LpbFR/RKYh5bMNGJiOcDMQjjxMEMKt1gfQ4Y/G5efDIbqrm/6rEpSLo3rLEflWmBqBwGWPzQ="

# You will likely prefer "language: generic" for travis configuration,
# rather than, say "language: python". Multibuild doesn't use
# Travis-provided Python but rather installs and uses its own, where the
# Python version is set from the MB_PYTHON_VERSION variable. You can still
# specify a language here if you need it for some unrelated logic and you
# can't use Multibuild-provided Python or other software present on a
# builder.
language: generic

# For CPython macOS builds only, the minimum supported macOS version and
# architectures of any C extensions in the wheel are set with the variable
# MB_PYTHON_OSX_VER: 10.9 (64-bit only) or 10.6 (64/32-bit dual arch). By
# default this is set to the highest available for the Python version selected
# using MB_PYTHON_VERSION. You should only need to set this explicitly if you
# are building a 10.6 dual-arch build for a CPython version where both a 10.9 and
# 10.6 build are available (for example, 2.7 or 3.7).
# All PyPy macOS builds are 64-bit only.

# Required in Linux to invoke `docker` ourselves
services: docker

# Host distribution.  This is the distribution from which we run the build
# and test containers, via docker.
dist: xenial

# osx image that enables building Apple silicon libraries
osx_image: xcode12.2

matrix:
  include:

    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.6
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.7
        - QUIP_ARCH=darwin_x86_64_gfortran
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.8
        - QUIP_ARCH=darwin_x86_64_gfortran
        - MB_PYTHON_OSX_VER=10.9
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.9
        - QUIP_ARCH=darwin_x86_64_gfortran
        - MB_PYTHON_OSX_VER=10.9
    - os: linux
      env:
        - MB_ML_VER=2010
        - MB_PYTHON_VERSION=3.6
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2010
        - MB_PYTHON_VERSION=3.7
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2010
        - MB_PYTHON_VERSION=3.8
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2010
        - MB_PYTHON_VERSION=3.9
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2014
        - MB_PYTHON_VERSION=3.6
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2014
        - MB_PYTHON_VERSION=3.7
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2014
        - MB_PYTHON_VERSION=3.8
        - QUIP_ARCH=linux_x86_64_gfortran
    - os: linux
      env:
        - MB_ML_VER=2014
        - MB_PYTHON_VERSION=3.9
        - QUIP_ARCH=linux_x86_64_gfortran

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
  - REPO_DIR=QUIP/build/${QUIP_ARCH}
  - |
    if [[ -n "${TRAVIS_TAG}" ]]; then
         echo ${TRAVIS_TAG} > TRAVIS_TAG
    fi
  - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
- |
  echo "after_success for tag ${TRAVIS_TAG}"
  if [[ -n "${TRAVIS_TAG}" ]]; then
    if echo "${TRAVIS_TAG}" | python -c 'import sys, re; r = re.compile(r"^v(\d+\.)?(\d+\.)?(\*|\d+)$"); sys.exit(r.match(sys.stdin.read()) is None)'; then
      echo Deploying ${TRAVIS_TAG} to PyPI
      pip install twine
      twine upload --testpypi ${TRAVIS_BUILD_DIR}/${WHEEL_SDIR}/*.whl
    else
      echo Skipping deployment of tag ${TRAVIS_TAG} to PyPi
    fi
  fi

deploy:
- provider: releases
  api_key:
      secure: "PhC50onmh/UlOAkSGahs4O59gyQCfyCrdCJsFvg0LIfATqCWDSDmM1qJOZok9RzCfLbrAACOhIFxCv+IhoKNcMny9n2t2i/kGIZwXYdZv0pFc6HKibOzCaIVO7z7q3onmTMCJhUnrE5FEJMpEG4/NsN7V9eKfFTX+Ep7bN7Ua3ZrQgnTPk0ANq+VQR+jJvCY+YYOrkUUMu59E7GFSGT10HOwieeZSz9Bx5rWCFHEDvnFzcYi+pankKSMN1VIkB5fbpU5MpA9DzWjmRBwnHwRK2rpVfGq61W84530EwwV6LzgN6TQTZKl3knRPjPX0gs8wUCJhl6FG0UgpZLqlC+DtFwQyefgqNAqR7A0T2nd49yF42jTNAsEmn0enYFvTGTayFQJGpk3P5uoxRJzBC4drWDtOMFhOh5sN0ZlhYI11XUCNSWlwb8pdSuKjAgSbxFsoBst+el+Th/+0WKxbo17pKpDljVzZRjLgMF0yOc6ubDc+yjJVj6Teq9GDJTDX/W5LezG5lXSjAoI+L0mabRbbQbqXlo+DzlyqTG1nMHZketZD7ZGeo4TJjvUFnS7JQlJT7d01Sjvt1BADidoQdlmoR5FlnZ/4/3FDeOeRNS7G/Fgl+YK71S8j+qZUwmXmUJr/kx0Nnd8YZ814gOVIqx2UneGetWgBmiRRFWfzmJzudg="
  file_glob: true
  file: "${TRAVIS_BUILD_DIR}/${WHEEL_SDIR}/*.whl"
  skip_cleanup: true
  on:
    repo: libAtoms/quippy-wheels
    tags: true
