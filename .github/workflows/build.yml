name: build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    tags:
      - v*    
  pull_request:
    branches: [ main ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.python }} ${{ matrix.os }} ${{ matrix.manylinux }}  ${{ matrix.plat }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3.6, 3.7, 3.8, 3.9]
        manylinux: [2010, 2014]
        plat: [x86_64]
        macos-target: [ "10.10" ]
#         include:
#           - os: macos-latest
#             python: 3.9
#             plat: arm64
        exclude:
          # just keep one macos variant, doesn't matter which
          - os: macos-latest
            manylinux: 2010
      fail-fast: false            
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Build and test
        env:
          MB_PYTHON_VERSION: ${{ matrix.python }}
          MB_ML_VER: ${{ matrix.manylinux }}
          PLAT: ${{ matrix.plat }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}      
          BUILD_DEPENDS: oldest-supported-numpy
          TEST_DEPENDS: numpy
        run: |
          # save path to Python 3.x version
          PYTHON_DIR=$(dirname $(which python))

          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          
          # restore GitHub Actions system Python to front of path
          export PATH=${PYTHON_DIR}:$PATH
          pip install virtualenv
          
          before_install

          if [ -n "$IS_MACOS" ]; then
              export QUIP_ARCH=darwin_x86_64_gfortran_openmp
          else
              export QUIP_ARCH=linux_x86_64_gfortran_openmp
          fi
          export REPO_DIR=QUIP/build/${QUIP_ARCH}
          if [[ ${{ github.event.ref }} =~ ^refs/tags/ ]]; then
               echo ${{ github.event.ref }} | sed -e 's|refs/tags/||' > GITHUB_TAG
          fi                    
          build_wheel $REPO_DIR $PLAT
          install_run $PLAT
          
      # Uncomment to get SSH access for testing
      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3          
          
      - name: Release wheels
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: wheelhouse/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=match::true
          fi

      - name: Deploy to PyPI
        if: steps.check-tag.outputs.match == 'true'
        run: |
          pip install twine
          twine upload wheelhouse/*.whl
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
